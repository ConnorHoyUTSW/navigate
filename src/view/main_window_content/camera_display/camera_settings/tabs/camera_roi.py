import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter.font import Font

from view.custom_widgets.LabelInputWidgetFactory import LabelInput

class camera_roi(ttk.Labelframe):
    '''
    # This class generates the camera roi label frame. 
    Widgets can be adjusted below. Dropdown values need to be set in the controller.
    The function widget.set_values(values) allows this. It can be found in the LabelInput class.
    The widgets can be found in the dictionary by using the first word in the label, after using get_widgets
    The variables tied to each widget can be accessed via the widget directly or with the dictionary generated by get_variables.
    '''
    def __init__(self, settings_tab, *args, **kwargs):

        # Init Frame
        text_label = 'Region of Interest Settings'
        ttk.Labelframe.__init__(self, settings_tab, text=text_label, *args, **kwargs)

        # Parent Label Frames for widgets
        # ROI
        self.roi_frame = ttk.LabelFrame(self, text='ROI')
        self.roi_frame.grid(row=0, column=0, sticky=(NSEW))
        # Pix Num
        self.num_pix_frame = ttk.LabelFrame(self, text='Number of pixels')
        self.num_pix_frame.grid(row=0, column=1, sticky=(NSEW))
        # FOV
        self.fov_frame = ttk.LabelFrame(self, text='FOV')
        self.fov_frame.grid(row=1, column=0, sticky=(NSEW))
        # ROI Center
        self.center_roi_frame = ttk.LabelFrame(self, text='ROI Center')
        self.center_roi_frame.grid(row=2, column=0, sticky=(NSEW))
        # Button Frame
        self.btn_frame = ttk.LabelFrame(self)
        self.btn_frame.grid(row=1, column=1, rowspan=2, sticky=(NSEW))

        

        # Dictionary for all the variables, this will be used by the controller
        self.inputs = {}
        self.buttons = {}

        # Labels and names
        self.roi_labels = ['Left', 'Right', 'Top', 'Bottom'] # names are the same, can be reused
        self.xy_labels = ['X', 'Y']
        self.fov_names = ['FOV_X', 'FOV_Y']
        self.center_names = ['Center_X', 'Center_Y']
        self.num_pix_names = ['Pixels_X', 'Pixels_Y']
        # Buttons
        self.btn_labels = ['Center ROI', 'Center ROI @', 'Use All Pixels', '1024x1024', '512x512']
        self.btn_names = ['Center_ROI', 'Center_At', 'Use_Pixels', '1024', '512']  
        
        # Loop for each frame
        for i in range(5):
            if i < 4:
                # ROI frame
                self.inputs[self.roi_labels[i]] = LabelInput(parent=self.roi_frame,
                                                    label=self.roi_labels[i],
                                                    input_class=ttk.Spinbox,
                                                    input_var=tk.IntVar(),
                                                    input_args={"from_": 0, "to": 2048, "increment": 1.0}
                                                    )                                 
                self.inputs[self.roi_labels[i]].grid(row=i, column=0, pady=1)
            if i < 2:
                # FOV Frame
                self.inputs[self.fov_names[i]] = LabelInput(parent=self.fov_frame,
                                            label=self.xy_labels[i],
                                            input_class=ttk.Entry,
                                            input_var=tk.IntVar()
                                            )                                 
                self.inputs[self.fov_names[i]].grid(row=i, column=0, pady=1)
                # ROI Center
                self.inputs[self.center_names[i]] = LabelInput(parent=self.center_roi_frame,
                                                    label=self.xy_labels[i],
                                                    input_class=ttk.Spinbox,
                                                    input_var=tk.IntVar(),
                                                    input_args={"from_": 0, "to": 2048, "increment": 1.0}
                                                    )                                 
                self.inputs[self.center_names[i]].grid(row=i, column=0, pady=1)
                # Number of pixels
                self.inputs[self.num_pix_names[i]] = LabelInput(parent=self.num_pix_frame,
                                                    label=self.xy_labels[i],
                                                    input_class=ttk.Spinbox,
                                                    input_var=tk.IntVar(),
                                                    input_args={"from_": 0, "to": 2048, "increment": 1.0}
                                                    )                                 
                self.inputs[self.num_pix_names[i]].grid(row=i, column=0, pady=1)
            
            # Button Frame
            self.buttons[self.btn_names[i]] = ttk.Button(self.btn_frame, text=self.btn_labels[i])
            self.buttons[self.btn_names[i]].grid(row=i, column=0, pady=1)

    def get_variables(self):
        '''
        # This function returns a dictionary of all the variables that are tied to each widget name.
        The key is the widget name, value is the variable associated.
        '''
        variables = {}
        for key, widget in self.inputs.items():
            variables[key] = widget.get()
        return variables
    
    def get_widgets(self):
        '''
        # This function returns the dictionary that holds the widgets.
        The key is the widget name, value is the LabelInput class that has all the data.
        '''
        return self.inputs
    
    def get_buttons(self):
        '''
        # This function returns the dictionary that holds the buttons.
        The key is the widget name, value is the LabelInput class that has all the data.
        '''
        return self.buttons
